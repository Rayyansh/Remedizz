# Generated by Django 5.1.7 on 2025-06-07 08:52

import django.contrib.auth.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('city', '0001_initial'),
        ('gender', '0001_initial'),
        ('specialization', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qualification', models.CharField(max_length=50)),
                ('college_name', models.CharField(max_length=50)),
                ('college_passing_year', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='RegistrationCouncil',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_council_name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='WorkExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_profile', models.CharField(max_length=50)),
                ('company_name', models.CharField(max_length=50)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 20 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=20, null=True, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('doctor_contact_number', models.CharField(blank=True, max_length=15, null=True)),
                ('doctor_email', models.EmailField(blank=True, max_length=30, null=True)),
                ('doctor_profile_picture', models.ImageField(blank=True, max_length=50, null=True, upload_to='doctor_profile_pictures/')),
                ('preferred_language', models.CharField(max_length=15)),
                ('terms_and_conditions_accepted', models.BooleanField(default=False)),
                ('registration_number', models.CharField(blank=True, max_length=50, null=True)),
                ('registration_year', models.DateField(null=True)),
                ('clinic_name', models.CharField(blank=True, max_length=100, null=True)),
                ('clinic_contact_number', models.CharField(blank=True, max_length=15, null=True)),
                ('clinic_number', models.CharField(blank=True, max_length=20, null=True)),
                ('clinic_timings', models.CharField(blank=True, max_length=100, null=True)),
                ('opd_fees', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('clinic_locality', models.CharField(blank=True, max_length=100, null=True)),
                ('clinic_street_address', models.CharField(blank=True, max_length=255, null=True)),
                ('clinic_address', models.CharField(blank=True, max_length=255, null=True)),
                ('clinic_pincode', models.CharField(blank=True, max_length=10, null=True)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='city.city')),
                ('clinic_city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clinic_city', to='city.city')),
                ('doctor_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='doctor_profile', to=settings.AUTH_USER_MODEL)),
                ('gender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gender.gender')),
                ('specialization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='specialization.doctorspecializations')),
                ('education', models.ManyToManyField(blank=True, related_name='doctors', to='doctors.education')),
                ('registration_council', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='doctors.registrationcouncil')),
                ('work_experience', models.ManyToManyField(blank=True, related_name='doctors', to='doctors.workexperience')),
            ],
            options={
                'db_table': 'doctor',
            },
        ),
        migrations.CreateModel(
            name='DoctorMedicalRecords',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medical_document', models.FileField(blank=True, null=True, upload_to='medical_document/')),
                ('doctor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to='doctors.doctor')),
            ],
        ),
        migrations.CreateModel(
            name='DoctorAvailabilityException',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('is_available', models.BooleanField(default=False)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_exceptions', to='doctors.doctor')),
            ],
            options={
                'ordering': ['doctor', 'date', 'start_time'],
                'unique_together': {('doctor', 'date', 'start_time', 'end_time')},
            },
        ),
        migrations.CreateModel(
            name='DoctorSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_type', models.CharField(blank=True, choices=[('Video Call', 'Video Call'), ('Audio Call', 'Audio Call'), ('Chat', 'Chat')], max_length=20, null=True)),
                ('weekday', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('slot_duration', models.PositiveIntegerField(default=15, help_text='Duration of each slot in minutes')),
                ('buffer_time', models.PositiveIntegerField(default=0, help_text='Gap after each slot in minutes')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weekly_availability', to='doctors.doctor')),
            ],
            options={
                'ordering': ['doctor', 'weekday', 'start_time'],
                'unique_together': {('doctor', 'weekday', 'start_time', 'end_time')},
            },
        ),
    ]
